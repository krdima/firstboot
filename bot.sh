#!/bin/bash

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç—Ä–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ $# -ne 3 ]; then
    echo "Usage: $0 <FINGERPRINT> <TG_BOT_TOKEN> <CHAT_ID>"
    exit 1
fi

FINGERPRINT="$1"
TG_BOT_TOKEN="$2"
CHAT_ID="$3"
API_URL="https://api.telegram.org/bot$TG_BOT_TOKEN"
MAX_PASS_ATTEMPTS=5
WIFI_CONF_DIR="/etc/netplan"
SSH_PORT=22

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
install_dependencies() {
    local pkgs=("curl" "jq" "net-tools" "iw" "wpasupplicant" "ufw" "nginx" "ansible")
    local missing=()
    
    for pkg in "${pkgs[@]}"; do
        if ! dpkg -l | grep -q "^ii  $pkg "; then
            missing+=("$pkg")
        fi
    done
    
    if [ ${#missing[@]} -gt 0 ]; then
        echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤: ${missing[*]}"
        apt-get update
        apt-get install -y "${missing[@]}"
    fi
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
send_message() {
    local text="$1"
    local markup="$2"
    local params=(-s -X POST "$API_URL/sendMessage" -d chat_id="$CHAT_ID" -d text="$text")
    
    [ -n "$markup" ] && params+=(-d reply_markup="$markup")
    
    curl "${params[@]}" > /dev/null
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
generate_keyboard() {
    local keyboard='{"inline_keyboard":['
    local rows=()
    local row=()
    local count=0
    
    while [ $# -gt 0 ]; do
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—è—Ç—É—é –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –≤ —Å—Ç—Ä–æ–∫–µ
        #if [ ${#row[@]} -gt 0 ]; then
            #row+=(',')
        #fi
        
        row+=("{\"text\":\"$1\",\"callback_data\":\"$2\"}")
        shift 2
        ((count++))
        
        if [ $count -eq 2 ]; then
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–æ–∫–∏
            local row_str=$(IFS=,; echo "${row[*]}")
            rows+=("[$row_str]")
            row=()
            count=0
        fi
    done
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É
    if [ ${#row[@]} -gt 0 ]; then
        local row_str=$(IFS=,; echo "${row[*]}")
        rows+=("[$row_str]")
    fi
    
    keyboard+=$(IFS=,; echo "${rows[*]}")
    keyboard+=']}'
    
    echo "$keyboard"
    
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
get_network_info() {
    local local_ip=$(hostname -I | awk '{print $1}')
    local public_ip=$(curl -4 -s ifconfig.me --max-time 5 || echo "N/A")
    local iface=$(ip route | awk '/default/ {print $5}')
    local iface_type="Unknown"
    
    # –¢–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    if [[ -d "/sys/class/net/$iface/wireless" ]]; then
        iface_type="Wi-Fi"
    else
        iface_type="Ethernet"
    fi
    
    echo "$local_ip|$public_ip|$iface_type|$iface"
}

# –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Wi-Fi –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
scan_wifi_interfaces() {
    for iface in /sys/class/net/*; do
        if [ -d "$iface/wireless" ]; then
            basename "$iface"
        fi
    done
}

# –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ç–µ–π wlp6s0
scan_wifi_networks() {
    local iface="$1"
    
    # –í–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if ! ip link set dev "$iface" up; then
        echo "ERR|–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å $iface"
        return 1
    fi
    
    # –ñ–¥–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    sleep 10
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    #local iface_status
    #iface_status=$(ip -o link show "$iface" | awk '{print $9}')
    #if [ "$iface_status" != "UP" ]; then
    #    echo "ERR|–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å $iface –æ—Å—Ç–∞–ª—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ DOWN"
    #    return 1
    #fi
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º —Å–µ—Ç–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    local scan_result
    scan_result=$(timeout 10 iw dev "$iface" scan 2>&1)
    
    if [[ "$scan_result" == *"command failed"* ]]; then
        echo "ERR|–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${scan_result##*: }"
        return 1
    fi
    
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    local networks
    networks=$(echo "$scan_result" | \
        awk -F ':' '
            /SSID:/ {
                start = index($0, ":") + 1;
                ssid = substr($0, start + 1);
                gsub(/^[[:blank:]]+|[[:blank:]]+$/, "", ssid);
            }
            /signal:/ {
                signal = $2;
                gsub(/^[[:blank:]]+|[[:blank:]]+$/, "", signal);
                print signal "|" ssid;
            }
        ' | sort -nr -t'|' -k1 | head -n 6)
    #show journal debug
    #echo "Networks result: $networks" >&2

    if [ -z "$networks" ]; then
        echo "ERR|–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ç–µ–π"
        return 1
    fi
    
    echo "$networks"
}

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wi-Fi —Å–µ—Ç–∏
connect_to_wifi() {
    local iface="$1"
    local ssid="$2"
    local password="$3"
    local conf_file="$WIFI_CONF_DIR/99-wifi-config.yaml"
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Netplan
    cat > "$conf_file" <<EOL
network:
  version: 2
  renderer: networkd
  wifis:
    $iface:
      dhcp4: true
      access-points:
        "$ssid":
          password: "$password"
EOL
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    chmod 600 "$conf_file"

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if netplan apply; then
        return 0
    else
        rm -f "$conf_file"
        return 1
    fi
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DuckDNS
setup_duckdns() {
    local token="$1"
    local domain="$2"
    local cron_job="*/5 * * * * curl -s 'https://www.duckdns.org/update?domains=$domain&token=$token&ip=' >/dev/null"
    
    echo "DEBUG: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DuckDNS —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: token=$token domain=$domain" >&2
    echo "DEBUG: Cron job: $cron_job" >&2
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è cron
    local temp_cron=$(mktemp)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
    crontab -l > "$temp_cron" 2>/dev/null || true
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ DuckDNS –µ—Å–ª–∏ –µ—Å—Ç—å
    sed -i '/duckdns\.org\/update/d' "$temp_cron"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    echo "$cron_job" >> "$temp_cron"
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π crontab
    if crontab "$temp_cron"; then
        echo "DEBUG: Crontab —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω" >&2
        rm -f "$temp_cron"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
        echo "DEBUG: –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ cron:" >&2
        crontab -l >&2
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        local test_url="https://www.duckdns.org/update?domains=$domain&token=$token&ip=1.2.3.4"
        echo "DEBUG: –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: $test_url" >&2
        local response=$(curl -s "$test_url")
        echo "DEBUG: –û—Ç–≤–µ—Ç DuckDNS: $response" >&2
        
        return 0
    else
        echo "ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å crontab" >&2
        rm -f "$temp_cron"
        return 1
    fi
}

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SSH –ø–æ—Ä—Ç–æ–º
manage_ssh_port() {
    local action="$1"
    
    if [ "$action" == "open" ]; then
        ufw allow $SSH_PORT
    else
        ufw delete allow $SSH_PORT
    fi
    ufw reload
}

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
show_main_menu() {
    local menu=(
        "üì° –ü–æ–ª—É—á–∏—Ç—å IP/–ø–æ—Ä—Ç—ã" "get_info"
        "ü¶Ü –ù–∞—Å—Ç—Ä–æ–∏—Ç—å DuckDNS" "setup_duckdns"
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Ansible" "setup_ansible"
        "üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SSH" "manage_ssh"
        "‚õî –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞" "shutdown"
    )
    
    local keyboard=$(generate_keyboard "${menu[@]}")
    send_message "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" "$keyboard"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
process_callback() {
    local callback_data="$1"
    local message_id="$2"
    
    case $callback_data in
        get_info)
            local info_str=$(get_network_info)
            IFS='|' read -r local_ip public_ip iface_type iface <<< "$info_str"
            local ports=$(ss -tuln)
            send_message "üì° –°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:%0A- –õ–æ–∫–∞–ª—å–Ω—ã–π IP: $local_ip%0A- –í–Ω–µ—à–Ω–∏–π IP: $public_ip%0A- –¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $iface_type%0A- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: $iface%0A%0Aüîì –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã:%0A$ports" ""
            ;;
            
        setup_duckdns)
            send_message "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏ –¥–æ–º–µ–Ω DuckDNS –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <—Ç–æ–∫–µ–Ω> <–¥–æ–º–µ–Ω>%0A–ü—Ä–∏–º–µ—Ä: abcdef12-1234-5678 mydomain.duckdns.org" ""
            echo "DEBUG: –ó–∞–ø—Ä–æ—à–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ DuckDNS" >&2
            ;;
            
        setup_ansible)
            send_message "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Ansible —Ä–æ–ª–∏...%0A–ò–º–∏—Ç–∞—Ü–∏—è: git clone <repo> && ansible-playbook setup.yml" ""
            ;;
            
        manage_ssh)
            local keyboard=$(generate_keyboard "–û—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç $SSH_PORT" "ssh_open" "–ó–∞–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç $SSH_PORT" "ssh_close")
            send_message "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SSH –ø–æ—Ä—Ç–æ–º:" "$keyboard"
            ;;
            
        ssh_open|ssh_close)
            manage_ssh_port "${callback_data#ssh_}"
            send_message "–ü–æ—Ä—Ç SSH $SSH_PORT ${callback_data#ssh_}!" ""
            ;;
            
        shutdown)
            send_message "üõë –ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è..." ""
            exit 0
            ;;
            
        wifi_iface_*)
            local iface="${callback_data#wifi_iface_}"
            #echo "DEBUG: –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ $iface" >&2

            local networks=$(scan_wifi_networks "$iface")
            #echo "DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–µ–π: $networks" >&2

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
            if [[ "$networks" == ERR* ]]; then
                send_message "‚ùå ${networks#ERR|}" ""
                show_main_menu
                return 0
            fi
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–µ—Ç—è–º–∏
            local net_options=()
            while IFS='|' read -r signal ssid; do
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                clean_ssid=$(echo "$ssid" | xargs)
                net_options+=("$clean_ssid ($signal)" "wifi_net_${clean_ssid}")
                #echo "DEBUG: –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–µ—Ç—å: $clean_ssid ($signal dBm) -> wifi_net_${clean_ssid}" >&2
            done <<< "$networks"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            echo "$iface" > /tmp/wifi_iface_$CHAT_ID
            #echo "DEBUG: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å $iface —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ /tmp/wifi_iface_$CHAT_ID" >&2

            local keyboard=$(generate_keyboard "${net_options[@]}")
            echo "DEBUG: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: $keyboard" >&2

            send_message "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å:" "$keyboard"
            echo "DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å–µ—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" >&2
            ;;
            
        wifi_net_*)
            local ssid="${callback_data#wifi_net_}"
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º SSID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            echo "$ssid" > /tmp/wifi_ssid_$CHAT_ID
            send_message "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–µ—Ç–∏ \"$ssid\":" ""
            ;;
    esac
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    install_dependencies
    
    # –ù–∞—á–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏
    local info_str=$(get_network_info)
    IFS='|' read -r local_ip public_ip iface_type iface <<< "$info_str"
    send_message "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!%0A- –û—Ç–ø–µ—á–∞—Ç–æ–∫: $FINGERPRINT%0A- –õ–æ–∫–∞–ª—å–Ω—ã–π IP: $local_ip%0A- –í–Ω–µ—à–Ω–∏–π IP: $public_ip%0A- –¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $iface_type%0A- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: $iface" ""
    show_main_menu

    # –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ Ethernet, —Å–∫–∞–Ω–∏—Ä—É–µ–º Wi-Fi –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
    if [[ "$iface_type" == "Ethernet" ]]; then
        local ifaces=($(scan_wifi_interfaces))
        
        if [ ${#ifaces[@]} -gt 0 ]; then
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏
            local iface_options=()
            for iface in "${ifaces[@]}"; do
                iface_options+=("$iface" "wifi_iface_$iface")
            done
            
            local keyboard=$(generate_keyboard "${iface_options[@]}")
            send_message "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã Wi-Fi –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:" "$keyboard"
        fi
    fi
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    local offset=0
    while true; do
        echo "DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram..." >&2
        local updates=$(curl -s "$API_URL/getUpdates?offset=$offset&timeout=60")
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ "integer expression expected"
        local count=$(echo "$updates" | jq -r '.result | length' 2>/dev/null || echo 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ count - —á–∏—Å–ª–æ
        if ! [[ "$count" =~ ^[0-9]+$ ]]; then
            count=0
        fi
        
        echo "DEBUG: –ü–æ–ª—É—á–µ–Ω–æ $count —Å–æ–æ–±—â–µ–Ω–∏–π" >&2

        if [ "$count" -gt 0 ]; then
            offset=$(echo "$updates" | jq -r '.result[-1].update_id' 2>/dev/null || echo 0)
            offset=$((offset + 1))
            
            for ((i=0; i<count; i++)); do
                
                echo "DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è $i/$count" >&2
                
                local message=$(echo "$updates" | jq -r ".result[$i].message")
                local callback=$(echo "$updates" | jq -r ".result[$i].callback_query")
                
                if [ "$message" != "null" ]; then
                    local text=$(echo "$message" | jq -r '.text')
                    local chat_id=$(echo "$message" | jq -r '.chat.id')
                    
                    echo "DEBUG: –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: $text" >&2

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
                    if [ "$text" == "/start" ]; then
                        echo "DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ /start" >&2
                        show_main_menu
                    elif [ $(echo "$text" | wc -w) -eq 2 ]]; then
                        # DuckDNS –¥–∞–Ω–Ω—ã–µ
                        echo "DEBUG: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ DuckDNS" >&2
                        read token domain <<< "$text"
                        setup_duckdns "$token" "$domain"
                        echo "DEBUG: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ DuckDNS: token='$token' domain='$domain'" >&2
                        send_message "‚úÖ DuckDNS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –¥–æ–º–µ–Ω–∞: $domain" ""
                        show_main_menu
                    elif [ -f "/tmp/wifi_ssid_$CHAT_ID" ]; then
                        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Wi-Fi
                        local ssid=$(cat "/tmp/wifi_ssid_$CHAT_ID")
                        local iface=$(cat "/tmp/wifi_iface_$CHAT_ID")
                        local password="$text"
                        
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                        rm -f "/tmp/wifi_ssid_$CHAT_ID" "/tmp/wifi_iface_$CHAT_ID"
                        
                        send_message "‚åõ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ $ssid..." ""
                        
                        if connect_to_wifi "$iface" "$ssid" "$password"; then
                            sleep 5  # –ñ–¥–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
                            local new_info_str=$(get_network_info)
                            IFS='|' read -r new_local_ip new_public_ip new_iface_type new_iface <<< "$new_info_str"
                            send_message "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!%0A- –õ–æ–∫–∞–ª—å–Ω—ã–π IP: $new_local_ip%0A- –í–Ω–µ—à–Ω–∏–π IP: $new_public_ip" ""
                        else
                            send_message "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–æ–ª—å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É." ""
                        fi
                        show_main_menu
                    elif [ "$text" == "/menu" ]; then
                        show_main_menu
                    else
                        echo "DEBUG: –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $text" >&2
                    fi
                
                elif [ "$callback" != "null" ]; then
                    local data=$(echo "$callback" | jq -r '.data')
                    local chat_id=$(echo "$callback" | jq -r '.message.chat.id')
                    local msg_id=$(echo "$callback" | jq -r '.message.message_id')
                    
                    echo "DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ callback: $data" >&2

                    process_callback "$data" "$msg_id"
                else
                    echo "DEBUG: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è" >&2
                fi
            done
        fi
    done
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main 